---
- name: Configure groups, users and directories.
  tags: "deployments-user"
  become: yes
  block:
    - name: Add groups for Oceannik
      group:
        name: "{{ item }}"
        state: present
      with_items:
        - oceannik
        - sudo

    - name: Fetch or create user for deployments
      user:
        name: '{{ deployment_user_name }}'
        state: present
        group: oceannik
        groups: oceannik
        create_home: yes
      register: deployment_user_obj

    - name: Create directory for storing project files
      file:
        path: '{{ item }}'
        state: directory
        owner: '{{ deployment_user_obj.uid }}'
        group: '{{ deployment_user_obj.uid }}'
      with_items:
        - '/home/{{ deployment_user_name }}/projects'
        - '/home/{{ deployment_user_name }}/containers'
        - '/home/{{ deployment_user_name }}/backups'

- name: Update apt cache if needed
  apt:
    update_cache: yes
    cache_valid_time: 3600
  become: yes
  ignore_errors: yes

- name: Set up the firewall
  tags: "ufw"
  become: yes
  block:
    - name: Install ufw
      apt:
        name: ufw
        state: present

    - name: Allow traffic on selected ports
      ufw:
        rule: "{{ item.rule }}"
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      with_items:
        - { rule: 'allow', port: 22, proto: 'tcp' }
        - { rule: 'allow', port: 80, proto: 'tcp' }
        - { rule: 'allow', port: 443, proto: 'tcp' }
        - { rule: 'allow', port: 123, proto: 'udp' }
        - { rule: 'allow', port: "{{ agent_server_default_port }}", proto: 'tcp' }

    - name: Configure default rules for the firewall
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
        state: enabled
      with_items:
        - { direction: outgoing, policy: allow }
        - { direction: incoming, policy: deny }
  when: inventory_hostname in groups[INVENTORY_CONFIG.master_group_name]

- name: Set up required packages
  tags: "packages"
  become: yes
  block:
    # - name: Install packages useful for debugging
    #   apt:
    #     name:
    #       - bzip2
    #       - libssl-dev
    #       - policykit-1
    #     state: present

    - name: Install required packages
      apt:
        name:
          # Useful for debugging and more
          # - cat
          - cron
          - vim
          - jq
          - tree
          - curl
          # Required by other programs
          - build-essential
          - bzip2
          - libssl-dev
          - policykit-1
          # Python
          - python3
          - python3-pip
        state: present

    - name: Link pip executable
      file:
        src: /usr/bin/pip3
        dest: /usr/bin/pip
        state: link

    - name: Install commonly used Python packages
      pip:
        name:
          - setuptools
          - wheel
          # - pyopenssl

- name: Set up Docker
  tags: "docker"
  become: yes
  block:
    - name: Check whether Docker is installed
      command: docker -v
      register: docker_version_check
      ignore_errors: True

    - name: Ensure docker and docker-py packages are absent
      pip:
        name:
          - docker-py
          - docker
        state: absent
      when: docker_version_check is failed

    - name: Install the correct python Docker package
      pip:
        name: docker
        state: present
      when: docker_version_check is failed

    - name: Install Docker
      apt:
        name: docker.io
        state: present
      when: docker_version_check is failed

    - name: Install docker-compose
      pip:
        name: docker-compose
        state: present
      when: docker_version_check is failed

    - name: Start the Docker service
      service:
        name: docker
        state: started
        enabled: yes

- name: Set up nginx
  tags: "nginx"
  become: yes
  block:
    - name: Install nginx
      apt:
        name: nginx
        state: present

    - name: Start the nginx service
      service:
        name: nginx
        state: started
  when: inventory_hostname in groups[INVENTORY_CONFIG.master_group_name]
