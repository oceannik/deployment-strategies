---
- set_fact:
    service_container_name: "{{ resource_prefix }}_{{ service_name }}"
    service_container_oceannik_injected_env:
      "OCEANNIK_DEPLOYMENT_ENVIRONMENT": "{{ target_environment | string }}"
      "OCEANNIK_DEBUG_PARAMS": '{"OCEANNIK_DEPLOYMENT_STRATEGY": "{{ OCEANNIK_DEPLOYMENT_STRATEGY | string }}"}'

- name: Stop the container if it already exists
  community.docker.docker_container:
    name: '{{ service_container_name }}'
    state: absent
  become: yes

- name: Start containers
  community.docker.docker_container:
    name: "{{ service_container_name }}"
    image: "{{ service_config['container']['image'] }}"
    pull: yes
    state: started
    restart: yes
    restart_policy: unless-stopped
    command: "{{ service_config['container']['command'] | default() }}"
    ports: "{{ service_config['container']['ports'] | default([]) }}"
    networks:
      - name: '{{ service_container_network_name }}'
    purge_networks: yes
    env: "{{ (service_config['container']['env'] | default({})) | combine(service_container_oceannik_injected_env) }}"
    volumes: "{{ service_config['container']['volumes'] | default([]) }}"
    links: "{{ service_config['container']['links'] | default([]) }}"
  register: service_container_inspection
  become: yes

- debug:
    var: service_container_inspection

- set_fact:
    service_container_inspection_ports_config: "{{ service_container_inspection.container['NetworkSettings']['Ports'] }}"

- name: Display port bindings for the created service container
  debug:
    var: service_container_inspection_ports_config

- set_fact:
    service_container_inspection_partial_config:
      "ports": "{{ service_container_inspection_ports_config }}"

- set_fact:
    services_created: "{{ hostvars[master_host]['services_created'] | combine({service_name: service_container_inspection_partial_config}) }}"
  delegate_to: "{{ master_host }}"
  delegate_facts: true

- debug:
    var: hostvars[master_host]['services_created']
